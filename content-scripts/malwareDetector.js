(function() {
  // Patterns de code malveillant connus
  const maliciousPatterns = [
    /eval\(.*base64/i,                 // Exécution de code encodé en base64
    /document\.write\(\s*unescape\s*\(/i,  // Utilisation de unescape dans document.write
    /<iframe[^>]*display:\s*none/i,    // iframes cachés 
    /\.createElement\(["|']script["|']\).*\.src\s*=/i,  // Création dynamique de scripts
    /window\.open\([^)]*\);\s*window\.location/i  // Redirection après popup
  ];

  function detectPhishingForms() {
  const forms = document.querySelectorAll('form');
  const phishingIndicators = ['login', 'account', 'password', 'verify', 'paypal', 'bank'];

  forms.forEach(form => {
    const action = form.getAttribute('action') || '';
    const textInputs = form.querySelectorAll('input[type="text"], input[type="email"]');
    const passwordInputs = form.querySelectorAll('input[type="password"]');

    if (passwordInputs.length > 0 && phishingIndicators.some(p => action.includes(p))) {
      chrome.runtime.sendMessage({
        action: "scamDetected",
        type: "phishing_form",
        count: 1,
        details: action
      });
    }

    textInputs.forEach(input => {
      if (input.name && phishingIndicators.some(p => input.name.toLowerCase().includes(p))) {
        chrome.runtime.sendMessage({
          action: "scamDetected",
          type: "phishing_input",
          count: 1,
          details: input.name
        });
      }
    });
  });
}

  
  // Vérifier le contenu de la page pour les scripts suspects
  function scanPageContent() {
    // Vérifier le HTML de la page
    const pageContent = document.documentElement.outerHTML;
    let detectedThreats = 0;
    
    maliciousPatterns.forEach(pattern => {
      if (pattern.test(pageContent)) {
        detectedThreats++;
      }
    });
    
    // Vérifier les scripts inline
    const inlineScripts = document.querySelectorAll('script:not([src])');
    inlineScripts.forEach(script => {
      const scriptContent = script.textContent;
      maliciousPatterns.forEach(pattern => {
        if (pattern.test(scriptContent)) {
          // Désactiver le script potentiellement malveillant
          script.textContent = '/* Script potentiellement malveillant désactivé */';
          detectedThreats++;
        }
      });
    });

    // Rechercher les mineurs de cryptomonnaie
    if (/coinhive|cryptoloot|deepminer|coinlab|cryptonight/i.test(pageContent)) {
      detectedThreats++;
    }
    
    if (detectedThreats > 0) {
      // Notifier le script d'arrière-plan
      chrome.runtime.sendMessage({
        action: "malwareDetected",
        count: detectedThreats
      });
    }
  }
  
  // Détecter les popups et les tentatives de verrouillage du navigateur
  function detectBrowserLocking() {
    // Remplacer la méthode alert pour éviter les boucles infinies d'alertes
    const originalAlert = window.alert;
    let alertCounter = 0;
    const alertTimeWindow = 5000; // 5 secondes
    
    window.alert = function(message) {
      alertCounter++;
      
      // Si plus de 3 alertes en 5 secondes, c'est probablement une tentative de verrouillage
      if (alertCounter > 3) {
        chrome.runtime.sendMessage({
          action: "scamDetected",
          type: "browser_locker",
          count: 1
        });
        
        // Bloquer les alertes supplémentaires
        return;
      }
      
      // Réinitialiser le compteur après le délai
      setTimeout(() => { alertCounter = 0; }, alertTimeWindow);
      
      // Exécuter l'alerte originale
      return originalAlert.call(window, message);
    };
    
    // Gérer également les confirm et prompt qui peuvent être utilisés pour bloquer
    const originalConfirm = window.confirm;
    window.confirm = function(message) {
      alertCounter++;
      if (alertCounter > 3) return false;
      setTimeout(() => { alertCounter = 0; }, alertTimeWindow);
      return originalConfirm.call(window, message);
    };
    
    const originalPrompt = window.prompt;
    window.prompt = function(message, defaultValue) {
      alertCounter++;
      if (alertCounter > 3) return null;
      setTimeout(() => { alertCounter = 0; }, alertTimeWindow);
      return originalPrompt.call(window, message, defaultValue);
    };
    
    // Empêcher les redirections forcées
    const originalAssign = window.location.assign;
    window.location.assign = function(url) {
      // Vérifier si l'URL est suspecte
      if (isScamURL(url)) {
        chrome.runtime.sendMessage({
          action: "scamDetected",
          type: "forced_redirect",
          count: 1
        });
        return; // Bloquer la redirection
      }
      return originalAssign.call(window.location, url);
    };
  }
  
  // Fonction pour vérifier si une URL est une arnaque connue
  function isScamURL(url) {
    // Liste d'exemples de domaines d'arnaques
    const scamDomains = [
      'tech-support-alert',
      'your-computer-infected',
      'windows-security-alert',
      'call-support-now',
      'browser-locked'
    ];
    
    return scamDomains.some(domain => url.includes(domain));
  }
  
  // Analyser la page au chargement
  scanPageContent();
  detectPhishingForms();
  
  // Mettre en place la protection contre le verrouillage du navigateur
  detectBrowserLocking();
  
  // Observer les changements pour détecter les injections tardives
  const observer = new MutationObserver(() => {
    scanPageContent();
    detectPhishingForms();
  });
  
  observer.observe(document.documentElement, {
    childList: true,
    subtree: true
  });
})();
